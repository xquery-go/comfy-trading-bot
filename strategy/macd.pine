import MocRarciano/JSONWebhooks/6 as wm
cnst = wm.CONSTANTS.new()

//@version=5
strategy("My strategy", overlay=true, calc_on_order_fills = true, initial_capital = 1000, default_qty_type = strategy.percent_of_equity, default_qty_value = 10)

var g_system = "System Entry Settings"
i_ema_filter = input.int(title = "EMA Filter length", defval = 200, group = g_system)
i_ema_filter2 = input.int(title = "Max Bars Above/Below", defval = 0, group = g_system)
i_stop_multi = input.float(title = "Stop Loss Multiplier", defval = 0.5, step = 0.5, group = g_system)
i_stop_lookback = input.int(title = 'Stop Loss Lookback', defval = 7, group = g_system)
var g_risk = 'Risk Settings'
i_rr1 = input.float(title = "Risk:Reward Target 1", defval = 1.0, group = g_risk)
i_rr2 = input.float(title = "Risk:Reward Target 2", defval = 2.0, group = g_risk)
i_fx_risk = input.float(title = "Forex Risk %", defval = 1.0, group = g_risk)
i_target1 = input.float(title = "Profit % Target 1", defval = 25, group = g_risk)
var g_macd = "MACD Settings"
i_price_src = input.source(title = "Price Source", defval = close, group = g_macd)
i_fast_length = input.int(title = "Fast Length", defval = 12, group = g_macd)
i_slow_length = input.int(title = "Slow Length", defval = 26, group = g_macd)
i_signal_length = input.int(title = "Signal Smoothing", minval = 1, maxval = 50, defval = 9, group = g_macd)
i_sma_source = input.string(title = "Oscillator MA Type", defval = "EMA", options = ["SMA", "EMA"], group = g_macd)

startDate = input.time(timestamp('2024-08-14T00:00:00'))

timeCond = time >= startDate

[macdLine, signalLine, histLine] = ta.macd(i_price_src, i_fast_length, i_slow_length, i_signal_length)

ema = ta.ema(close, i_ema_filter)
atr = ta.atr(14)

crossUp = ta.crossover(signalLine, macdLine)
crossDown = ta.crossunder(signalLine, macdLine)

tradeFilters = not na(ema) and not na(atr)

upTrend = close > ema
downTrend = close < ema

longConditions = tradeFilters and macdLine[1] < -100 and signalLine[1] < -100
shortConditions = tradeFilters and macdLine[1] > 100 and signalLine[1] > 100

longSignal = longConditions and upTrend and crossDown
shortSignal = shortConditions and downTrend and crossUp

longStop = ta.lowest(low, i_stop_lookback) - (atr * i_stop_multi)
shortStop = ta.highest(high, i_stop_lookback) + (atr * i_stop_multi)

var float tradeStop = na
var float tradeTarget1 = na
var float tradeTarget2 = na


int barsAboveMA = 0
int barsBelowMA = 0

for i = 1 to 5
    if close[i] < ema[i]
        barsBelowMA += 1
    if close[i] > ema[i]
        barsAboveMA += 1

longTrade = longSignal and barsBelowMA <= i_ema_filter2 and strategy.position_size == 0
// longTrade = close > open
shortTrade = shortSignal and barsAboveMA <= i_ema_filter2 and strategy.position_size == 0
// shortTrade = close < open

if longTrade
    strategy.entry(id='long', direction = strategy.long)
    priceStopDiff = close - longStop
    priceStopAvg = (close + longStop) / 2
    stopPerc = (priceStopDiff/priceStopAvg)
    qtyAnt = (10/stopPerc) / close 
    takeProfitPrice = close + (priceStopDiff * i_rr2)
    // msg = wm.webhookMessage.new( ticker = syminfo.ticker, action = cnst.ACTION_BUY, price = math.round(close, 2), quantity = math.round(qtyAnt, 4), stopLoss = math.round(longStop, 1), takeProfit = math.round(takeProfitPrice, 1) ).buildWebhookJson()
    msg = wm.webhookMessage.new( ticker = syminfo.ticker, action = cnst.ACTION_BUY, price = math.round(close, 2), stopLoss = math.round(longStop, 1), takeProfit = math.round(takeProfitPrice, 1) ).buildWebhookJson()
    alert(msg, alert.freq_once_per_bar_close)
    tradeStop := na
    tradeTarget1 := na
    tradeTarget2 := na

if shortTrade
    strategy.entry(id = 'short', direction = strategy.short)
    priceStopDiff = close - shortStop
    priceStopAvg = (close + shortStop) / 2
    stopPerc = (priceStopDiff/priceStopAvg)
    qtyAnt = (10/stopPerc) / close 
    takeProfitPrice = close - (priceStopDiff * i_rr2)
    // msg = wm.webhookMessage.new( ticker = syminfo.ticker, action = cnst.ACTION_SELL, price = math.round(close, 2), quantity = math.round(math.abs(qtyAnt), 4), stopLoss = math.round(shortStop, 1), takeProfit = math.round(math.abs(takeProfitPrice), 1) ).buildWebhookJson()
    msg = wm.webhookMessage.new( ticker = syminfo.ticker, action = cnst.ACTION_SELL, price = math.round(close, 2), stopLoss = math.round(shortStop, 1), takeProfit = math.round(math.abs(takeProfitPrice), 1) ).buildWebhookJson()
    alert(msg, alert.freq_once_per_bar_close)
    tradeStop := na
    tradeTarget1 := na
    tradeTarget2 := na

if strategy.position_size > 0 and na(tradeStop)
    tradeStop := longStop
    stopDistance = strategy.position_avg_price - tradeStop
    tradeTarget1 := strategy.position_avg_price + (stopDistance * i_rr1)
    tradeTarget2 := strategy.position_avg_price + (stopDistance * i_rr2)

if strategy.position_size < 0 and na(tradeStop)
    tradeStop := shortStop
    stopDistance =  tradeStop - strategy.position_avg_price
    tradeTarget1 := strategy.position_avg_price - (stopDistance * i_rr1)
    tradeTarget2 := strategy.position_avg_price - (stopDistance * i_rr2)

strategy.exit(id = "Long Exit", from_entry = "long", limit = tradeTarget2, stop = tradeStop, qty_percent = 100)
strategy.exit(id = "Short Exit", from_entry = "short", limit = tradeTarget2, stop = tradeStop, qty_percent = 100)

plot(ema, color = close > ema ? color.green : color.red, linewidth = 2, title = "EMA")
plotshape(longTrade, style = shape.triangleup, color = color.green, location = location.belowbar, title = 'Long Set Up')
plotshape(shortTrade, style = shape.triangledown, color = color.red, location = location.abovebar, title = 'Short Set Up')

plot(strategy.position_size != 0 ? tradeStop : na, color = color.red, style = plot.style_linebr, title = "Stop Loss")
plot(strategy.position_size != 0 ? tradeTarget2 : na, color = color.green, style = plot.style_linebr, title = "Target")
